// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  User
}

model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId() 
  userId String @unique
  name String
  imageUrl String 
  email String 
  likes String[] @default([])

  role UserRole @default(User)
  posts Post[]
  
  conversationsInitiated Conversation[] @relation("profileOne")
  conversationsReceived Conversation[] @relation("profileTwo")
  directMessages DirectMessage[]
  
  comments Comment[]
  replyComment ReplyComment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId()
  title String
  content String
  like Int @default(0)
  viewed Int @default(0)
  
  city String?
  gu String?
  marketPrice Int? @default(0)
  place String?


  images Image[]

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  subCategoryId String @db.ObjectId
  subCategory SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)

  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([subCategoryId])
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId()
  text String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  replyComments ReplyComment[]
}

model ReplyComment {
  id String @id @default(auto()) @map("_id") @db.ObjectId()
  text String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  commentId String @db.ObjectId
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}


model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId()
  name String
  subCategories SubCategory[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
}

model SubCategory {
  id String @id @default(auto()) @map("_id") @db.ObjectId()
  name String
  posts Post[]
  
  categoryId String @db.ObjectId
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([categoryId])
  @@unique([name])
}


model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  postId String   @db.ObjectId // Foreign Key to post
  post   Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

model DirectMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId()
  content String 

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([conversationId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId()

  profileOneId String @db.ObjectId
  profileOne Profile @relation("profileOne", fields: [profileOneId], references: [id], onDelete: Cascade)

  profileTwoId String @db.ObjectId
  profileTwo Profile @relation("profileTwo", fields: [profileTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([profileTwoId])

  @@unique([profileOneId, profileTwoId])
}
